Due to react router implemententing breaking changes at least once a year Stephen Grider shows us that it is possible to create a faux react router out of components, useEffect hook and DOM window methods.

1. Stephen shows that window.location in the browser console will reveal a an object that has a property of pathname on it.the value for path name is accurate to the search bar in the browser.

2. see '/App-with-repeated-show.js' for details

3. Stephen then shows a repeated function;-
    const showComponent = (route, component) => {
      return window.location.pathname === route
      ? component
      : null;
    };
 but says how this isn't really an approach you should tke in react ( why not just create a component to do all the heavy lifting)

 4. here we make a route component.
    it takes two props path (the path of the url)
    and children this when you nest one JSX tag in another it becomes a child of the parent (this is done in App.js)

5.  Stephen highlights how HTML is wired that when you click   on a url changing link that the page will hard reload. Obviously this is no good for what we want.  
  user clicks on link => change URL but don't do full page refresh => each route could detect the URL has changed => Route could update piece of state tracking the current pathname => each route rerenders, showing/hiding components appropriately

6. header => link => Navigation event object
    the nav event obj will emit an onclick event ot each route in the app. when they receive the nav event they will decide whether to show their child components.

    //prevent a full page reload
    event.preventDefault();

    //change the URL without reloading entire page
    window.history.pushState({}, '', href)

    next send that event to all the routes to tell them that the link has just changed

    const navEvent = new popStateEvent('popstate');
    window.dispatchEvent(navEvent);

7. Now we have to make sure that any time the onlocationchange function is called we have to tell the route component to rerender itself.

